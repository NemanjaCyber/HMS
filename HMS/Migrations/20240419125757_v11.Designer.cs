// <auto-generated />
using System;
using HMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMS.Migrations
{
    [DbContext(typeof(HMSContext))]
    [Migration("20240419125757_v11")]
    partial class v11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HMS.Models.Appointment", b =>
                {
                    b.Property<int>("Appointment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Appointment_ID"));

                    b.Property<DateOnly>("Appointment_Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Appointment_Time")
                        .HasColumnType("time");

                    b.Property<int?>("Appointment_With_DoctorDoctor_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Appointment_With_PatientPatient_ID")
                        .HasColumnType("int");

                    b.HasKey("Appointment_ID");

                    b.HasIndex("Appointment_With_DoctorDoctor_ID");

                    b.HasIndex("Appointment_With_PatientPatient_ID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_ID"));

                    b.Property<int>("Department_EmplCount")
                        .HasColumnType("int");

                    b.Property<string>("Department_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.Property<int>("Doctor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_ID"));

                    b.Property<DateOnly>("Doctor_DateJoining")
                        .HasColumnType("date");

                    b.Property<int?>("Doctor_Department_IdDepartment_ID")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Doctor_ID");

                    b.HasIndex("Doctor_Department_IdDepartment_ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HMS.Models.EmergencyContact", b =>
                {
                    b.Property<int>("EmergencyContact_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmergencyContact_ID"));

                    b.Property<string>("EmergencyContact_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContact_Realtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedPatient_IdPatient_ID")
                        .HasColumnType("int");

                    b.HasKey("EmergencyContact_ID");

                    b.HasIndex("RelatedPatient_IdPatient_ID");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("HMS.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Record_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Record_ID"));

                    b.Property<string>("Alergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<string>("Pre_Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Record_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("HMS.Models.Medicine", b =>
                {
                    b.Property<int>("Medicine_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Medicine_ID"));

                    b.Property<decimal>("M_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("M_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("M_Quantity")
                        .HasColumnType("int");

                    b.HasKey("Medicine_ID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.Property<int>("Nurse_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Nurse_ID"));

                    b.Property<DateOnly>("Nurse_DateJoining")
                        .HasColumnType("date");

                    b.Property<int?>("Nurse_Department_IdDepartment_ID")
                        .HasColumnType("int");

                    b.Property<string>("Nurse_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nurse_Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nurse_Lname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nurse_ID");

                    b.HasIndex("Nurse_Department_IdDepartment_ID");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("HMS.Models.Patient", b =>
                {
                    b.Property<int>("Patient_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patient_ID"));

                    b.Property<DateTime>("Admision_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Assigned_Room_IdRoom_ID")
                        .HasColumnType("int");

                    b.Property<string>("Blood_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Discharge_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Patient_ID");

                    b.HasIndex("Assigned_Room_IdRoom_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HMS.Models.Prescription", b =>
                {
                    b.Property<int>("Prescription_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Prescription_ID"));

                    b.Property<int?>("Assigned_PatientPatient_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Prescription_ID");

                    b.HasIndex("Assigned_PatientPatient_ID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.Room", b =>
                {
                    b.Property<int>("Room_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Room_ID"));

                    b.Property<int>("Room_Available_Beds")
                        .HasColumnType("int");

                    b.Property<decimal>("Room_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Room_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Room_ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.Property<int>("Assigned_MedicinesMedicine_ID")
                        .HasColumnType("int");

                    b.Property<int>("Assigned_To_PrescriptionsPrescription_ID")
                        .HasColumnType("int");

                    b.HasKey("Assigned_MedicinesMedicine_ID", "Assigned_To_PrescriptionsPrescription_ID");

                    b.HasIndex("Assigned_To_PrescriptionsPrescription_ID");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HMS.Models.Appointment", b =>
                {
                    b.HasOne("HMS.Models.Doctor", "Appointment_With_Doctor")
                        .WithMany("Doctor_Appointments_Id")
                        .HasForeignKey("Appointment_With_DoctorDoctor_ID");

                    b.HasOne("HMS.Models.Patient", "Appointment_With_Patient")
                        .WithMany("Patient_Appointments_Id")
                        .HasForeignKey("Appointment_With_PatientPatient_ID");

                    b.Navigation("Appointment_With_Doctor");

                    b.Navigation("Appointment_With_Patient");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.HasOne("HMS.Models.Department", "Doctor_Department_Id")
                        .WithMany("Department_Doctors_Id")
                        .HasForeignKey("Doctor_Department_IdDepartment_ID");

                    b.Navigation("Doctor_Department_Id");
                });

            modelBuilder.Entity("HMS.Models.EmergencyContact", b =>
                {
                    b.HasOne("HMS.Models.Patient", "RelatedPatient_Id")
                        .WithMany("PatientsEmergencyContacts")
                        .HasForeignKey("RelatedPatient_IdPatient_ID");

                    b.Navigation("RelatedPatient_Id");
                });

            modelBuilder.Entity("HMS.Models.MedicalHistory", b =>
                {
                    b.HasOne("HMS.Models.Patient", "Patient_Id")
                        .WithMany()
                        .HasForeignKey("Patient_ID");

                    b.Navigation("Patient_Id");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.HasOne("HMS.Models.Department", "Nurse_Department_Id")
                        .WithMany("Department_Nurses_Id")
                        .HasForeignKey("Nurse_Department_IdDepartment_ID");

                    b.Navigation("Nurse_Department_Id");
                });

            modelBuilder.Entity("HMS.Models.Patient", b =>
                {
                    b.HasOne("HMS.Models.Room", "Assigned_Room_Id")
                        .WithMany("Room_Patients")
                        .HasForeignKey("Assigned_Room_IdRoom_ID");

                    b.Navigation("Assigned_Room_Id");
                });

            modelBuilder.Entity("HMS.Models.Prescription", b =>
                {
                    b.HasOne("HMS.Models.Patient", "Assigned_Patient")
                        .WithMany()
                        .HasForeignKey("Assigned_PatientPatient_ID");

                    b.Navigation("Assigned_Patient");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.HasOne("HMS.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("Assigned_MedicinesMedicine_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("Assigned_To_PrescriptionsPrescription_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Navigation("Department_Doctors_Id");

                    b.Navigation("Department_Nurses_Id");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.Navigation("Doctor_Appointments_Id");
                });

            modelBuilder.Entity("HMS.Models.Patient", b =>
                {
                    b.Navigation("Patient_Appointments_Id");

                    b.Navigation("PatientsEmergencyContacts");
                });

            modelBuilder.Entity("HMS.Models.Room", b =>
                {
                    b.Navigation("Room_Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
